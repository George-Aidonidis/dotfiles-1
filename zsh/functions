#!/usr/bin/env bash

# zsh hook functions

preexec(){
	_CMD_START_DATE=$(date +%s)
	_CMD_NAME=$1
}
precmd(){
	# save history in sqlitedb github.com/
	histdb-update-outcome
	# notify for long commands
	long-command-done-notify
	
}




# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Make symbolic link between a projet directory and my workspace directory
workon() {
	local workspace=$HOME/Workspace
	local projet=$(realpath $1)
	if [[ -d $workspace ]]; then
		echo " You are already working on other projet !"
		# Tre is a shortand for tree ! See tre function below
		tre $workspace
		echo " You must workoff before "
	else
		ln -s $projet  $workspace  && \
		# Open with the file explorer and visual studio code editor
		cd $workspace && \
		code $workspace && \
		tre $workspace || \
		echo " Somethings are wrong ..."
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Simple calculator
calc() {
		python -c "print($*)"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove link to worspace directory
workoff() { unlink $HOME/Workspace }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Transform characters from latin to ascii
	# Credit : Christophe Blaess in " Shells Unix et Linux par la pratique"
	# usage: echo "Caractères accentués en français" | lt-ascii
	# result: Caracteres accentues en francais
lt-ascii() {
	sed -e 's/[ÀÁÂÃÄÅ]/A/g'|
	sed -e 's/Æ/AE/g'      |
	sed -e 's/Ç/C/g'       |
	sed -e 's/[ÈÉÊË]/E/g'  |
	sed -e 's/[ÌÍÎÏ]/I/g'  |
	sed -e 's/Ñ/N/g'       |
	sed -e 's/[ÒÓÔÕÖØ]/O/g'|
	sed -e 's/[ÙÚÛÜ]/U/g'  |
	sed -e 's/ Ý /Y/g'     |
	sed -e 's/[àáâãä]/a/g' |
	sed -e 's/æ/ae/g'      |
	sed -e 's/ç/c/g'       |
	sed -e 's/[èéêë]/e/g'  |
	sed -e 's/[ìíîï]/i/g'  |
	sed -e 's/ñ/n/g'       |
	sed -e 's/[òóôöø]/o/g' |
	sed -e 's/[ùúûü]/u/g'  |
	sed -e 's/ ý /y/g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Print with number of line for each line .
	# usage: numrec <file>
	# e.g.: numrec /etc/password
		# result:  1 : root:x:0:0:root:/root:/bin/bash
numrec() { awk '{print NR " : " $0}' $@ }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create animated GIFs from any video
# Uses http://gist.github.com/SlexAxton/4989674
gifify() {
	if [[ -n "$1" ]]; then
		if [[ $2 == '--good' ]]; then
			ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
			time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- \
				| gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
			rm out-static*.png
		else
			ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
		fi
	else
		echo "proper usage: gifify <input_movie.mov>. You DO need to include an extension."
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# REMIND ME, ITS IMPORTANT!
# Needs zenity installed.
	# usage: remindme <time> <text>
	# e.g.: remindme 10m "omg, the pizza"
remindme() { sleep $1; zenity --info --title "Rappel" --text $2 & }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# a 'cat' with beautiful colors
# Needs pygmentize
	# usage : ca .zshrc
ca(){ pygmentize -O style=monokai -f console256 -g $@ |less -XNFR }


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Launch php server on public dir if not directory is precised
phpd(){
	local directory="public"
	if [[ $1 ]] ; then
		directory=$1
	fi
	 php -S localhost:5555 -t $directory \
		-ddisplay_errors=1 \
		-dzend_extension=xdebug.so \
		-dxdebug.remote_enable=1 \
		-dxdebug.remote_autostart=1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Transform the manual of a command to pdf and open it.
# usage: man2pdf zsh
man2pdf(){
	man -t $1 > /tmp/$1.pdf && xdg-open /tmp/$1.pdf &
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Goes up many dirs as the number passed as argument, if none goes up by 1 by default
# usage : up 3 is the same with cd ../../..
up() {
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++)); do
		d=$d/..
	done
	 d=$(echo $d | sed 's/^\///')
	if [[ -z "$d" ]]; then
		d=..
	fi
	cd $d
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ARCHIVE COMPRESS
compress() {
	if [[ -n "$1" ]]; then
		FILE=$1
		case $FILE in
			*.tar ) shift && tar cf $FILE $* ;;
			*.tar.bz2 ) shift && tar cjf $FILE $* ;;
			*.tar.gz ) shift && tar czf $FILE $* ;;
			*.tgz ) shift && tar czf $FILE $* ;;
			*.zip ) shift && zip $FILE $* ;;
			*.rar ) shift && rar $FILE $* ;;
			* ) shift && tar zcvf $FILE.tar.gz $* ;;
		esac
	else
	echo "usage: compress <foo.tar.gz> ./foo ./bar"
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# tre is a shorthand for tree
tre() { tree -aC -I '.git|node_modules|vendor|.idea|.vscode' --dirsfirst "$@" | less -FRNX; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone projet from git repo
# Inspired from https://justin.abrah.ms/dotfiles/zsh.html
# usage : clone https://github.com/rails/rails
clone() {
	local USER=$(echo $@ | tr "/" " " | awk '{print $3}')
	local REPO=$(echo $@ | tr "/" " " | awk '{print $4}')
	cd "$HOME/Codes/Open/" && \
	git clone --depth 1 $@  ${REPO}@${USER} && \
	cd ${REPO}@${USER}
	if [[ -e package.json ]]; then
		npm install
	fi
	if [[ -e composer.json ]]; then
		composer install
	fi
	if [[ -e requirements.txt ]]; then
		pip install -U -r requirements.txt
	fi
	if [[ -e Gemfile ]]; then 
	    bundle install  --path ./vendor/bundle/
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
 	# yarn global add statikk
 	statikk --port "$port" .
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# take this repo and copy it to somewhere else minus the .git stuff.
# Usage: gitexport dotfiles
gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install Gulp plugins and add them as `devDependencies` to `package.json`
# Usage: `gp- uglify clean cache csso`
gp-() { yarn add --dev ${*/#/gulp-} }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Retry until it will work.
# usage : retry ping -c 5 8.8.8.8
retry() {
	echo "Retrying $@"
	until $@; do
		sleep 1
	done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
a() {
	if [[ $# -eq 0 ]]; then
		atom .;
	else
		atom "$@";
	fi;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# `v` with no arguments opens the current directory in nvim, otherwise opens the
# given location
v() {
	if [[ ! -w $@ && -e $@ ]]; then
		sudo -e "$@"
	elif [[ $# -eq 0 ]]; then
		nvim .;
	else
		nvim "$@";
	fi;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# credit to  github.com/nicknisi/dotfiles
# Show the most used commands

hist() {
	history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# Colored man pages
# credit https://github.com/robbyrussel/oh-my-zsh/plugins/colored-man-pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;40;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		PAGER="${commands[less]:-$PAGER}" \
		_NROFF_U=1 \
		PATH="$HOME/bin:$PATH" \
			man "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# take a repo and copy it to somewhere else minus the .git stuff.
# credit to  github.com/nicknisi/dotfiles
gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# `vs` with no arguments opens the current directory in Visual studio code, otherwise opens the
# given location
vs() {
	if [[ $# -eq 0 ]]; then
		code .;
	else
		code "$@";
	fi;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create file.bak when you edit file ! Help when you need to restore old conf
vb() {
	if [[ -e $@  &&  -w $@ ]]; then
		cp -i $@ $@.bak && nvim $@
	elif [ -e $@ ] && [ ! -w $@ ]; then
		sudo cp -i $@ $@.bak && sudo -e $@
	else
		echo "$@ doesn't exist "
	fi
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sign and crypt
# e.g: gcrypt 'Igor Visi' password.txt
gcrypt() { gpg2 --recipient $1 --sign --encrypt $2 }
# e.g: bac password.txt
bcrypt() { tar zcv $1|gpg2 --recipient salut@igorvisi.com --sign --encrypt -o $1.tar.gz.gpg }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Human readable file size (binary size)
# (because `du -h` doesn't cut it for me).
# see sz function below
hrfs() {
	printf "%s" "$1" |
	awk '{
			i = 1;
			split("B KB MB GB TB PB EB ZB YB WTFB", v);
			value = $1;
			# confirm that the input is a number
			if ( value + .0 == value ) {
				while ( value >= 1024 ) {
					value/=1024;
					i++;
				}

				if ( value == int(value) ) {
					printf "%d %s", value, v[i]
				} else {
					printf "%.1f %s", value, v[i]
				}

			}
	}' |
	sed -e ":l" \
			-e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
		#    └─ add thousands separator
		#        (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get ratio between file and his compressed version .
gz() {
	local gzippedSize=0
	local originalSize=0

	if [ -d "$1" ]; then
		local file=${1##*/}
		tar -cf /tmp/$file.tar $1/*
		originalSize=$( du -sb $1 | cut -f1 ) && gzippedSize=$( gzip -9 -c "/tmp/$file.tar" | wc -c )
		rm -f /tmp/$file.tar
	else
		originalSize=$( wc -c < $1 ) && gzippedSize=$( gzip -c "$1" | wc -c )
	fi

	printf "Taille originale  :  %12s\n" "$(hrfs "$originalSize")"
	printf "Taille compressée :  %12s\n" "$(hrfs "$gzippedSize")"
	printf " ─────────────────────────────\n"
	printf " Ratio:       %12s [%s%%]\n\n" \
	"$( hrfs $((originalSize - gzippedSize)) )" \
	"$( printf "%s" "$originalSize $gzippedSize" | \
	awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
	sed -e "s/0*$//;s/\.$//" )"
		#            └─ remove tailing zeros
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get the size of the file
sz() { printf "%12s\n" "$(hrfs "$( wc -c < "$1" )")" }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Backup somefiles with archives : tar and gzip
backup() { tar zcvf $1.`date --rfc-3339=date`.bak.tar.gz $1/ }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Create a directory and enter it
mcd () { mkdir -p "$@" && cd "$@"}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# git commit browser. Needs fzf
log() {
	git log --graph --color=always \
			--format="%C(auto)%h%d %G? %s %C(black)%C(bold)%cr" "$@" |
	fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
			--bind "ctrl-m:execute:
								echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
								xargs -I % sh -c 'git show --color=always % | less -R'"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#cp with progress bar
cp_p () { rsync -WavP --human-readable --recursive -P $1 $2 }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}
